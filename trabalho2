p = PVector(10, 500) #posicao
v = PVector(90, 0) #velocidade
g = PVector(0, -200) #aceleracao (gravidade)
f = 0.1 #forca de retardo
xmin = 50
xmax = 400
ymin = 150
ymax = 500 #
oldt = millis()/1000.0 #tempo
c2=PVector(225,300) #centro da bola vermelha
r2=50 #raio da bola vermelha
r1=15 #raio da bolinha azul
n_ratas=1 #numero de colisoes
k=1 #constate de atrito
q=1 #constante de velocidade
o=-1 #orientacao; pra mudar faz com 1

teta = PI*2 #posicao inicial da referencia (para o movimento da bolinha amarela)
r = 25 #o raio do circulo Ã© 50 - usei 25 para a referencia (assim a bolinha amarela fica no entre a borda e o centro)


def setup():
    size(450,500)
    rectMode(CORNERS)
    ellipseMode(CENTER) #padrao do processing

def draw():
    global oldt,n_ratas,teta,font,r,k,q,o,p,v,c2,r1,r2

    F = v.copy() #F sera a forca que age sobre a bolinha
    F.mult(-f) #multiplica pelo fator de retardo
    F.add(g) #add a aceleracao
    t = millis()/1000.00 #conta o tempo
    dt = t- oldt #conta a variacao 
    oldt = t #atualiza o oldt
    dp = v.copy() 
    dp.mult(dt)
    p.add(dp)
    F.mult(dt)
    v.add(F)
    
    if p.x > xmax:
        p.x = xmax - (p.x-xmax)
        v.x = -v.x
    if p.x < xmin:
        p.x = xmin + (xmin - p.x)
        v.x = -v.x
    if p.y > ymax:
        p.y = ymax - (p.y - ymax)
        v.y = -v.y
    if p.y < ymin:
        p.y = ymin + (ymin - p.y)
        v.y = -v.y #detecta colisoes com as paredes e muda o movimento da particula
        
        
        
    Distancia_entre_centros=(PVector.sub(c2,p)).mag() #((p.x-250)**2+((600-p.y)-250)**2)**0.5
    if Distancia_entre_centros<=(r1+r2): #detecta a colisao com a bola vermelha
        V=PVector.sub(c2,p) 
        V=V/V.mag() #vetor unitaria que liga um centro ao outro
        VV=PVector(o*V.y,-o*V.x) #vetor unitario tangente a bola vermelha no ponto de colisao
        if ((V.x*v.x)+(V.y*v.y))>=0: #isso impede que erros ocorram na deteccao de colisao por motivos de alta velocidade e afins
            print(" {} RATA(S)".format(n_ratas)) #printa o numero de colisoes como RATA(S)
            n_ratas+=1 #atualiza o nnumero de colisoes para o proximo print
            proj=((v.x*V.x+v.y*V.y)/(V.x**2+V.y**2))*V #faz a projecao da velocidade sobre V
            mod=proj.mag() #modulo da projecao
            v=v-2*proj #atualiza a velocidade de acordo com a colisao (sem cnsiderar ainda a velocidade a atrito da bola vermelha
            v=v.add(VV.mult(mod*k*q)) #atualiza a velocidade levando em consideracao a velocidade (dependendte da velocidade da vermleha e atrito entre as duas) que a bola vermelha imprime na azul
        
        
    t = 6*float(millis())/1000 #atualizando a posicao: velocidade*delta_t/r
    i = r*cos(o*q*t)
    j = r*sin(o*q*t) #faz o movimento da bolinha vermelha, leando em consideracao a velocidade
    

    background(218,227,175)
    fill(255,227,110)
    rect(xmin-r1,ymax-50+r1,xmax+r1,ymin-50-r1)
    fill(214,14,0)
    ellipse(c2.x,c2.y+2*(300-c2.y),2*r2,2*r2)
    fill(100,202,214)
    ellipse(p.x,600- p.y, 2*r1, 2*r1)
    noFill()
    strokeWeight(3)
    stroke(0)
    #rect(xmin-25/2, 600 - ymax-25/2, xmax+25/2, 600 - ymin+25/2) #modo ana
    rect(xmin-r1,ymax-50+r1,xmax+r1,ymin-50-r1)
    ellipse(c2.x,c2.y+2*(300-c2.y),2*r2,2*r2)
    ellipse(p.x, 600-p.y, 2*r1, 2*r1)
    fill(255,172,0)
    ellipse(i+c2.x,c2.y+2*(300-c2.y)-j,15,15) #desenha tudo
    
    noStroke()

    if mousePressed:
        p=PVector(mouseX,mouseY-300)
        v=PVector(0,-100) #atualiza a posicao e velocidade da bolinha para o lugar onde se da o clique do mouse
    
    textFont(createFont("Cooper", 30))
    fill(0)
    text("Feliz Natal e Boas Festas",50,55)  #escreve a mensagem la encima
    textFont(createFont("Cooper", 15))
    text("Arthur e Yolanda",275,75) 
